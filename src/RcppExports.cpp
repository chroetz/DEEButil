// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// whichMinDist
int whichMinDist(NumericMatrix target, NumericVector query);
RcppExport SEXP _DEEButil_whichMinDist(SEXP targetSEXP, SEXP querySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type target(targetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type query(querySEXP);
    rcpp_result_gen = Rcpp::wrap(whichMinDist(target, query));
    return rcpp_result_gen;
END_RCPP
}
// distToVec
NumericVector distToVec(NumericMatrix x, NumericVector y);
RcppExport SEXP _DEEButil_distToVec(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(distToVec(x, y));
    return rcpp_result_gen;
END_RCPP
}
// distSqrToVec
NumericVector distSqrToVec(NumericMatrix target, NumericVector query);
RcppExport SEXP _DEEButil_distSqrToVec(SEXP targetSEXP, SEXP querySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type target(targetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type query(querySEXP);
    rcpp_result_gen = Rcpp::wrap(distSqrToVec(target, query));
    return rcpp_result_gen;
END_RCPP
}
// distSqrToSeg
double distSqrToSeg(NumericVector u, NumericVector v0, NumericVector v1);
RcppExport SEXP _DEEButil_distSqrToSeg(SEXP uSEXP, SEXP v0SEXP, SEXP v1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v0(v0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v1(v1SEXP);
    rcpp_result_gen = Rcpp::wrap(distSqrToSeg(u, v0, v1));
    return rcpp_result_gen;
END_RCPP
}
// distSqrToPwLin
NumericVector distSqrToPwLin(NumericMatrix path, NumericVector query);
RcppExport SEXP _DEEButil_distSqrToPwLin(SEXP pathSEXP, SEXP querySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type path(pathSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type query(querySEXP);
    rcpp_result_gen = Rcpp::wrap(distSqrToPwLin(path, query));
    return rcpp_result_gen;
END_RCPP
}
// whichMinDistToPwLin
double whichMinDistToPwLin(NumericMatrix path, NumericVector id, NumericVector query);
RcppExport SEXP _DEEButil_whichMinDistToPwLin(SEXP pathSEXP, SEXP idSEXP, SEXP querySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type path(pathSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type query(querySEXP);
    rcpp_result_gen = Rcpp::wrap(whichMinDistToPwLin(path, id, query));
    return rcpp_result_gen;
END_RCPP
}
// fast_exp_neg_sq
NumericVector fast_exp_neg_sq(NumericVector x);
RcppExport SEXP _DEEButil_fast_exp_neg_sq(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_exp_neg_sq(x));
    return rcpp_result_gen;
END_RCPP
}
// expKernelMatrix
NumericMatrix expKernelMatrix(NumericMatrix state, double bandwidth, double regulation);
RcppExport SEXP _DEEButil_expKernelMatrix(SEXP stateSEXP, SEXP bandwidthSEXP, SEXP regulationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type state(stateSEXP);
    Rcpp::traits::input_parameter< double >::type bandwidth(bandwidthSEXP);
    Rcpp::traits::input_parameter< double >::type regulation(regulationSEXP);
    rcpp_result_gen = Rcpp::wrap(expKernelMatrix(state, bandwidth, regulation));
    return rcpp_result_gen;
END_RCPP
}
// expKernelVector
NumericVector expKernelVector(NumericVector xout, NumericMatrix x, double bandwidth);
RcppExport SEXP _DEEButil_expKernelVector(SEXP xoutSEXP, SEXP xSEXP, SEXP bandwidthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type xout(xoutSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type bandwidth(bandwidthSEXP);
    rcpp_result_gen = Rcpp::wrap(expKernelVector(xout, x, bandwidth));
    return rcpp_result_gen;
END_RCPP
}
// expKernelVectors
NumericMatrix expKernelVectors(NumericMatrix xout, NumericMatrix x, double bandwidth);
RcppExport SEXP _DEEButil_expKernelVectors(SEXP xoutSEXP, SEXP xSEXP, SEXP bandwidthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type xout(xoutSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type bandwidth(bandwidthSEXP);
    rcpp_result_gen = Rcpp::wrap(expKernelVectors(xout, x, bandwidth));
    return rcpp_result_gen;
END_RCPP
}
// expKernelDerivVector
NumericMatrix expKernelDerivVector(NumericVector xout, NumericMatrix x, double bandwidth);
RcppExport SEXP _DEEButil_expKernelDerivVector(SEXP xoutSEXP, SEXP xSEXP, SEXP bandwidthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type xout(xoutSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type bandwidth(bandwidthSEXP);
    rcpp_result_gen = Rcpp::wrap(expKernelDerivVector(xout, x, bandwidth));
    return rcpp_result_gen;
END_RCPP
}
// expKernelVectorFromDistSqr
NumericVector expKernelVectorFromDistSqr(NumericVector distSqr, double bandwidth);
RcppExport SEXP _DEEButil_expKernelVectorFromDistSqr(SEXP distSqrSEXP, SEXP bandwidthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type distSqr(distSqrSEXP);
    Rcpp::traits::input_parameter< double >::type bandwidth(bandwidthSEXP);
    rcpp_result_gen = Rcpp::wrap(expKernelVectorFromDistSqr(distSqr, bandwidth));
    return rcpp_result_gen;
END_RCPP
}
// expKernelMatrix1D
NumericMatrix expKernelMatrix1D(NumericVector x, double bandwidth, double regulation);
RcppExport SEXP _DEEButil_expKernelMatrix1D(SEXP xSEXP, SEXP bandwidthSEXP, SEXP regulationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type bandwidth(bandwidthSEXP);
    Rcpp::traits::input_parameter< double >::type regulation(regulationSEXP);
    rcpp_result_gen = Rcpp::wrap(expKernelMatrix1D(x, bandwidth, regulation));
    return rcpp_result_gen;
END_RCPP
}
// expKernelVectors1D
NumericMatrix expKernelVectors1D(NumericVector x, NumericVector xout, double bandwidth);
RcppExport SEXP _DEEButil_expKernelVectors1D(SEXP xSEXP, SEXP xoutSEXP, SEXP bandwidthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type xout(xoutSEXP);
    Rcpp::traits::input_parameter< double >::type bandwidth(bandwidthSEXP);
    rcpp_result_gen = Rcpp::wrap(expKernelVectors1D(x, xout, bandwidth));
    return rcpp_result_gen;
END_RCPP
}
// expKernelDerivVectors1D
NumericMatrix expKernelDerivVectors1D(NumericVector x, NumericVector xout, double bandwidth);
RcppExport SEXP _DEEButil_expKernelDerivVectors1D(SEXP xSEXP, SEXP xoutSEXP, SEXP bandwidthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type xout(xoutSEXP);
    Rcpp::traits::input_parameter< double >::type bandwidth(bandwidthSEXP);
    rcpp_result_gen = Rcpp::wrap(expKernelDerivVectors1D(x, xout, bandwidth));
    return rcpp_result_gen;
END_RCPP
}
// minDistTimeState
NumericVector minDistTimeState(NumericMatrix query, NumericMatrix target, NumericVector time, double scale);
RcppExport SEXP _DEEButil_minDistTimeState(SEXP querySEXP, SEXP targetSEXP, SEXP timeSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type query(querySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type target(targetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type time(timeSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(minDistTimeState(query, target, time, scale));
    return rcpp_result_gen;
END_RCPP
}
// minDist
NumericVector minDist(NumericMatrix query, NumericMatrix target);
RcppExport SEXP _DEEButil_minDist(SEXP querySEXP, SEXP targetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type query(querySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type target(targetSEXP);
    rcpp_result_gen = Rcpp::wrap(minDist(query, target));
    return rcpp_result_gen;
END_RCPP
}
// evaluateMonomials
NumericMatrix evaluateMonomials(NumericMatrix x, IntegerMatrix degrees);
RcppExport SEXP _DEEButil_evaluateMonomials(SEXP xSEXP, SEXP degreesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type degrees(degreesSEXP);
    rcpp_result_gen = Rcpp::wrap(evaluateMonomials(x, degrees));
    return rcpp_result_gen;
END_RCPP
}
// getMonomialExponents
IntegerMatrix getMonomialExponents(int dimension, int degree);
RcppExport SEXP _DEEButil_getMonomialExponents(SEXP dimensionSEXP, SEXP degreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type dimension(dimensionSEXP);
    Rcpp::traits::input_parameter< int >::type degree(degreeSEXP);
    rcpp_result_gen = Rcpp::wrap(getMonomialExponents(dimension, degree));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_DEEButil_whichMinDist", (DL_FUNC) &_DEEButil_whichMinDist, 2},
    {"_DEEButil_distToVec", (DL_FUNC) &_DEEButil_distToVec, 2},
    {"_DEEButil_distSqrToVec", (DL_FUNC) &_DEEButil_distSqrToVec, 2},
    {"_DEEButil_distSqrToSeg", (DL_FUNC) &_DEEButil_distSqrToSeg, 3},
    {"_DEEButil_distSqrToPwLin", (DL_FUNC) &_DEEButil_distSqrToPwLin, 2},
    {"_DEEButil_whichMinDistToPwLin", (DL_FUNC) &_DEEButil_whichMinDistToPwLin, 3},
    {"_DEEButil_fast_exp_neg_sq", (DL_FUNC) &_DEEButil_fast_exp_neg_sq, 1},
    {"_DEEButil_expKernelMatrix", (DL_FUNC) &_DEEButil_expKernelMatrix, 3},
    {"_DEEButil_expKernelVector", (DL_FUNC) &_DEEButil_expKernelVector, 3},
    {"_DEEButil_expKernelVectors", (DL_FUNC) &_DEEButil_expKernelVectors, 3},
    {"_DEEButil_expKernelDerivVector", (DL_FUNC) &_DEEButil_expKernelDerivVector, 3},
    {"_DEEButil_expKernelVectorFromDistSqr", (DL_FUNC) &_DEEButil_expKernelVectorFromDistSqr, 2},
    {"_DEEButil_expKernelMatrix1D", (DL_FUNC) &_DEEButil_expKernelMatrix1D, 3},
    {"_DEEButil_expKernelVectors1D", (DL_FUNC) &_DEEButil_expKernelVectors1D, 3},
    {"_DEEButil_expKernelDerivVectors1D", (DL_FUNC) &_DEEButil_expKernelDerivVectors1D, 3},
    {"_DEEButil_minDistTimeState", (DL_FUNC) &_DEEButil_minDistTimeState, 4},
    {"_DEEButil_minDist", (DL_FUNC) &_DEEButil_minDist, 2},
    {"_DEEButil_evaluateMonomials", (DL_FUNC) &_DEEButil_evaluateMonomials, 2},
    {"_DEEButil_getMonomialExponents", (DL_FUNC) &_DEEButil_getMonomialExponents, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_DEEButil(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
